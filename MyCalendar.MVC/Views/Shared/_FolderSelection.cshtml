@model MyCalendar.Website.ViewModels.DocumentMoveVM
@using MyCalendar.Helpers
@using MyCalendar.Enums
<style>
    #menu-@Model.Type.Id:checked + .main-menu {
        display: block;
    }
</style>

<nav class="menu" style="width: 250px">
    <div class="container">
        <label for="menu-@Model.Type.Id" class="toggle-menu">
            Folders <span class="drop-icon"><span class="fas fa-caret-down"></span></span>
        </label>
        <input type="checkbox" id="menu-@Model.Type.Id">
        <ul class="main-menu clearfix" style="width:250px">
            <li style="width: 250px">
                <a href="#">
                    <span class="fas fa-folder-open"></span> Folder Selection
                    <span class="drop-icon">
                        <span class="fas fa-caret-down"></span>
                    </span>
                    <label title="Toggle Drop-down" class="drop-icon" for="parent-menu-@Model.Type.Id">
                        <span class="fas fa-caret-down"></span>
                    </label>
                </a>
                <div id="move-folder" style="display: none">
                    <div class="loader loader-small"></div>
                </div>
                <div class="alert alert-success" id="success-alert" style="display: none">
                    <button type="button" class="close" data-dismiss="alert">x</button>
                    <strong>Document successfully moved</strong>
                </div>
                <input type="checkbox" id="parent-menu-@Model.Type.Id">
                @{
                    @helper ShowTree(IEnumerable<MyCalendar.Model.Types> types)
                    {
                        int counter = 1;
                        <ul class="sub-menu" style="width:250px">
                            <li style="width: 250px;">
                                @if (!Model.IsDocument && types.FirstOrDefault().SuperTypeId == null)
                                {
                                    <a onclick="MoveFolder('@Model.Type.Name', 'root', '@Model.Type.Id', @types.FirstOrDefault().SuperTypeId)" style="padding: 15px">
                                        <span class="fas fa-sitemap"></span> Root Folder
                                    </a>
                                }
                            </li>
                            @foreach (var userType in types.Where(x => x.UserCreatedId == Model.UserId || (x.InviteeIdsList != null && x.InviteeIdsList.Contains(Model.UserId))))
                            {
                                <li style="width:250px">
                                    <a onclick="MoveFolder('@Model.Type.Name', '@userType.Name', '@Model.Type.Id', @userType.Id )" style="padding: 15px">
                                        @if (userType.Children.Any(x => x.SuperTypeId.HasValue && x.SuperTypeId == userType.Id))
                                        {
                                            <span class="fas fa-folder-open"></span> @userType.Name
                                            <span class="drop-icon">
                                                <span class="fas fa-caret-down"></span>
                                            </span>
                                            <label title="Toggle Drop-down" class="drop-icon" for="child-menu-@userType.Id">
                                                <span class="fas fa-caret-down"></span>
                                            </label>
                                        }
                                        else
                                        {
                                            <span class="fas fa-folder"></span> @userType.Name
                                        }
                                    </a>
                                    @if (userType.Children.Any(x => x.SuperTypeId.HasValue && x.SuperTypeId == userType.Id))
                                    {
                                        <input type="checkbox" id="child-menu-@userType.Id">
                                        @ShowTree(userType.Children)
                                    }
                                </li>
                            }
                        </ul>
                        counter++;
                    }
                }
                @ShowTree(Model.UserTypes)
            </li>
        </ul>
    </div>
</nav>

<script type="text/javascript">
    function MoveFolder(moveStr, moveToStr, id, moveToId) {
        if (confirm('Move "' + moveStr + '" to "' + moveToStr + '" folder?')) {
            $("#move-folder").show();
            $.ajax({
                url: '@(Url.MvcRoute(Model.IsDocument ? Section.MoveDocument : Section.MoveType).RouteUrl)',
                type: "GET",
                data: { Id: id, moveToId: moveToId },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.status) {
                        $('#move-folder').hide();
                        $("#success-alert").fadeTo(1000, 500).slideUp(500, function () {
                            $("#success-alert").slideUp(500);
                        });
                    }
                    else {
                        $('#move-folder').hide();
                        alert("Failed" + data.responseText)
                    }
                },
                error: function (result) {
                    $('#move-folder').hide();
                    alert('Failed' + result);
                }
            });
        }
    }
</script>

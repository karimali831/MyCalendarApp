
@model Appology.Website.Areas.MiFinance.ViewModels.MonzoAccountSummaryVM
@using Appology.Website.ViewModels
@using Appology.MiFinance.Enums
@using Appology.MiFinance.Models
@using Appology.Helpers

@{
    ViewBag.Title = "Account Summary";
    var SortCodeFormat = string.Join("-",
        new[] {
        Model.SortCode.Substring(0, 2),
        Model.SortCode.Substring(2, 2),
        Model.SortCode.Substring(4, 2)
    });

    var rowsContent = new List<Func<object, IHtmlString>>()
    {
        @<tr>
            <td colspan="2" style="padding: 0px">
                <div class="content-shadow">
                    <div class="content-inner light-bg">
                        <div class="d-flex justify-content-center">
                            <span class="badge badge-primary bank-details" style="margin-right: 5px">Accout No: @Model.AccountNo</span>
                            <span class="badge badge-primary bank-details">Sort Code: @SortCodeFormat</span>
                        </div>
                        <div class="col-xs-12 alert alert-warning">
                            <span style="float: right">
                                <a href="@Url.Action("ApproveDataAccess", "Monzo", new { showPotAndTags = !Model.ShowPotAndTags })"><i class="fas fa-info-circle fa-2x"></i></a>
                            </span>
                            <i class="fas fa-exclamation-triangle"></i> Last Updated: @Model.LastSynced.ToString("dd/MM/yyyy HH:mm")
                        </div>
                        @if (Model.Modal != null)
                        {
                            @Html.Partial("_BootBox", Model.Modal)
                        }
                        <div style="font-size: 15px" >
                            <span class="badge badge-warning">Balance: @Utils.ToCurrency(Model.Balance)</span>
                            <span style="float: right" class="badge badge-success">Spent Today: @Utils.ToCurrency(-Model.SpentToday)</span>
                        </div>
                    </div>
                </div>
             </td>
        </tr>
    };

    foreach (var entry in Model.Transactions.Keys)
    {
        rowsContent.Add(
                @<tr>
                    <th colspan="2">@entry Transactions</th>
                </tr>
            );

        foreach (var transaction in Model.Transactions.Where(x => x.Key == entry).SelectMany(x => x.Value))
        {
            if ((!Model.ShowPotAndTags && string.IsNullOrEmpty(transaction.DeclineReason)) || Model.ShowPotAndTags)
            {

                string plus = (transaction.Amount > 0 ? "+" : null);
                string color = (transaction.Amount > 0 ? "green" : null);
                string status = "active";

                switch (entry)
                {
                    case MonzoTransactionStatus.Pending:
                        status = "waiting";
                        break;
                    case MonzoTransactionStatus.Unsynced:
                        status = "danger";
                        break;
                    case MonzoTransactionStatus.Settled:
                        status = "active";
                        break;
                }

                rowsContent.Add(
                @<tr class="alert" role="alert">
                    <td class="d-flex align-items-center">
                        @if (!Model.ShowPotAndTags)
                        {
                            <div class="img" style="background-image: url(@transaction.Logo)"></div>
                        }
                        <div class="pl-3 email">
                            <span>
                                @transaction.Name
                                @if (transaction.Status == MonzoTransactionStatus.Unsynced)
                                {
                                    <small>@Html.ActionLink("(sync)", "AddTransaction", "Monzo", new { monzoTransId = transaction.Id, transaction.Name, transaction.Amount, date = transaction.Created.ToString("yyyy-MM-ddTHH:mm") }, new { target = "_blank" })</small>
                                    <small>@Html.ActionLink("(void)", "DeleteTransaction", "Monzo", new { monzoTransId = transaction.Id }, new { onclick = "return confirm('Are you sure you wish to delete this unsycned transaction?');" })</small>
                                }
                            </span>
                            <span>@transaction.Created.ToShortDateString() @transaction.Created.ToShortTimeString()</span>
                            @if (Model.ShowPotAndTags)
                            {
                                <small>(@transaction.Category) @transaction.Description - @transaction.Id <font color="red">@transaction.DeclineReason</font></small>
                            }
                        </div>
                    </td>
                    <td class="status">
                        <span class="@status">@plus@Utils.ToCurrency(transaction.Amount / 100m)</span>
                    </td>
                </tr>
                );
            }
        }
    }

    // TableColumns = new List<string> { "Merchant", "Amount", "Actions" },

    if (rowsContent != null)
    {

        @Html.Partial("_TableDetail", new TableDetailVM
        {
            RowsContent = rowsContent
        })
    }
}